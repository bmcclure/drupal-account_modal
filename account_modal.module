<?php

use Drupal\account_modal\AccountModalAjaxHelper;
use Drupal\account_modal\AccountPageHelper;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function account_modal_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name === 'help.page.account_modal') {
    $output = '';
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('Adds the ability to open account links in a modal window') . '</p>';
    return $output;
  }
}

/**
 * {@inheritdoc}
 */
function account_modal_page_attachments(array &$attachments) {
  // @todo Only load this if there are account links on the page
  $attachments['#attached']['library'][] = 'account_modal/account_modal';
}

/**
 * Implements hook_link_alter().
 */
function account_modal_link_alter(&$variables) {
  /** @var \Drupal\Core\Url $url */
  $url = $variables['url'];

  if (!$url->isRouted()) {
    return;
  }

  $routeName = $url->getRouteName();
  $accountPageHelper = new AccountPageHelper();
  $page = $accountPageHelper->getPageFromRoute($routeName);

  if (is_null($page)) {
    return;
  }

  $config = \Drupal::config('account_modal.settings');
  $dialog_width = $config->get('dialog_width');
  if (empty($dialog_width) && $dialog_width !== '0') {
    $dialog_width = '480';
  }

  $dialog_height = $config->get('dialog_height');
  if (empty($dialog_height) && $dialog_height !== '0') {
    $dialog_height = 'auto';
  }

  $variables['options']['attributes']['class'][] = 'use-ajax';
  $variables['options']['attributes']['data-dialog-type'] = 'modal';
  $variables['options']['attributes']['data-dialog-options'] = \Drupal\Component\Serialization\Json::encode([
    'width' => $dialog_width,
    'height' => $dialog_height,
    'dialogClass' => 'account-modal account-modal--' . $page,
  ]);
}

/**
 * Implements hook_form_alter().
 */
function account_modal_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $accountPageHelper = new AccountPageHelper();
  $pageId = $accountPageHelper->getPageFromFormId($form_id);

  if (is_null($pageId)) {
    return;
  }

  if (!\Drupal::request()->isXmlHttpRequest()) {
    return;
  }

  $config = \Drupal::config('account_modal.settings');

  if ($config->get('hide_field_descriptions')) {
    AccountModalAjaxHelper::hideFieldDescriptions($form);
  }

  if (in_array($pageId, ['login', 'register', 'password'])) {
    AccountModalAjaxHelper::injectBlocks($form);
  }

  $form['#prefix'] = '<div id="account_modal_' . $pageId . '_wrapper">';
  $form['#suffix'] = '</div>';
  $form['actions']['submit']['#ajax'] = ['callback' => 'account_modal_' . $pageId . '_ajax_callback'];
  $form['#attached']['library'][] = 'account_modal/account_modal';
}

/**
 * Implements hook_ajax_render_alter().
 */
function account_modal_ajax_render_alter(array &$data) {
  $route = \Drupal::routeMatch();
  $helper = new AccountPageHelper();
  $page = $helper->getPageFromRoute($route->getRouteName());

  if (is_null($page)) {
    return;
  }

  // TODO: Use this to prepend/append blocks and modify output as necessary.
}

function account_modal_login_ajax_callback(array $form, FormStateInterface $form_state) {
  return AccountModalAjaxHelper::ajaxCallback('login', $form, $form_state);
}

function account_modal_register_ajax_callback(array $form, FormStateInterface $form_state) {
  return AccountModalAjaxHelper::ajaxCallback('register', $form, $form_state);
}

function account_modal_password_ajax_callback(array $form, FormStateInterface $form_state) {
  return AccountModalAjaxHelper::ajaxCallback('password', $form, $form_state);
}

function account_modal_profile_add_ajax_callback(array $form, FormStateInterface $form_state) {
  return AccountModalAjaxHelper::ajaxCallback('profile_add', $form, $form_state);
}

function account_modal_profile_edit_ajax_callback(array $form, FormStateInterface $form_state) {
  return AccountModalAjaxHelper::ajaxCallback('profile_edit', $form, $form_state);
}
